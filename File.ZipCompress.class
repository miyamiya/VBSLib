'
'! File or Directory to Zip File
'
'! @author  miyamiya <rai.caver@gmail.com>
'! @version 0.1
Class ZipCompress

    '!
    '! Scripting.FileSystemObject
    '!
    '! @param   f        object Scripting.FileSystemObject
    Private f

    '!
    '! Temporary Directory
    '!
    '! @param   wkDir    string Directory Path
    Private wkDir

    '!
    '! Zip File
    '!
    '! @param  zipName   string zip file path
    Private zipName

    '!
    '! OverWrite Flag
    '!
    '! @param   overwrite   boolean  True:yes, False: no
    Private overwrite

    '!
    '! Target File or Directory
    '!
    '! @param  target   array File or Directory path
    Private target()

    '! constructor
    '!
    '! @param  void
    '! @return void
    Private Sub Class_Initialize
        wkDir = shell.Environment("SYSTEM")("TEMP")
        Set f = CreateObject("Scripting.FileSystemObject")
        ReDim target(0)
        overwrite = true
    End Sub

    '! destructor
    '!
    '! @param  void
    '! @return void
    Private Sub Class_Terminate
        Set f = Nothing
        Erase target
    End Sub

    '! Set Zip File Name
    '!
    '! @param  theName     string zip file path
    '! @return void
    Public Property Let setZipName(byval theName)
        zipName = f.GetAbsolutePathName(theName)
    End Property

    '! Set Target File or Directory
    '!
    '! @param  theName     string path
    '! @return void
    Public Property Let setTarget(byval theName)
        If (f.FileExists(theName) = False And f.FolderExists(theName) = False) Then
            WScript.Echo "No Such File or Directory. ("&theName&")"
            WScript.Quit
        End If
        If (target(Ubound(target)) <> "") Then
            ReDim Preserve target(Ubound(target)+1)
        End If
        target(Ubound(target)) = f.GetAbsolutePathName(theName)
    End Property

    '! Set OverWrite Flag
    '!
    '! @param  theFlg      boolean True:yes, False: no
    '! @return void
    Public Property Let isOverwrite(byval theFlg)
        If (VarType(theFlg) <> vbBoolean) Then
            WScript.Echo "'isOverwrite' is type Boolean"
            WScript.Quit
        End If
        overwrite = theFlg
    End Property

    '! Set Zip File Name
    '!
    '! @param  theName     string zip file path
    '! @return void
    Public Function compress()
        If (f.FileExists(zipName) = True And overwrite = False) Then
            WScript.Echo "Zipfile Exists. ("&zipName&")"
            WScript.Quit
        End If

        With f.CreateTextFile(zipName, overwrite)
            .Write Chr(80) & Chr(75) & Chr(5) & Chr(6) & String(18, 0)
            .Close
        End With

        Dim i
        For Each i In target
            CreateObject("Shell.Application").NameSpace(zipName).CopyHere(i)
            Call WatchEvent
        Next
    End Function

    '! Print Information
    '!
    '! @param  void
    '! @return void
    Public Function debug()
        Dim i
        WScript.Echo "Temporary Directory" & vbLf & vbTab & wkDir & vbLf
        WScript.Echo "Zip File Name" & vbLf & vbTab & zipName & vbLf
        WScript.Echo "Target File or Directory"
        For Each i In target
            WScript.Echo vbTab & i
        Next
    End Function

End Class


Private ZipCompress_BASE_CNT, ZipCompress_SINK_CNT
'!
'! Watch Process
'!
'! @param  void
'! @return void
Private Function WatchEvent()
    Dim SINK: Set SINK = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
    Dim WMI:  Set WMI = GetObject("winmgmts:\\.\root\cimv2")
    WMI.ExecNotificationQueryAsync SINK, _
        "SELECT * FROM  __InstanceOperationEvent  WITHIN 1 " & _
        "WHERE TargetInstance ISA 'Win32_Process' AND TargetInstance.Name = 'explorer.exe'"
    Do
        ZipCompress_BASE_CNT = ZipCompress_SINK_CNT
        WScript.Sleep 2000
        If (ZipCompress_BASE_CNT = ZipCompress_SINK_CNT) Then
            Exit Function
        End If
    Loop
End Function

'
' Hook 
'
Sub SINK_OnObjectReady(e, asyncContext)
    ZipCompress_SINK_CNT = ZipCompress_SINK_CNT + 1
End Sub
